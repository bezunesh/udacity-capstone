version: 2.1
orbs:
  docker: circleci/docker@1.6.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0


jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/app
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  create-and-push-image:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: bezu/helloapp
          registry: docker.io
          tag: ${CIRCLE_WORKFLOW_ID}
      - run:
          command: |
            docker image ls
      - docker/push:
          digest-path: /tmp/digest.txt
          image: bezu/helloapp
          registry: docker.io
          tag: ${CIRCLE_WORKFLOW_ID}
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"
       
  create-infrastructure:
    executor: aws-eks/python3
    steps:
      - aws-eks/create-cluster:
          cluster-name: cluster-${CIRCLE_WORKFLOW_ID}
          node-type: t2.micro
          aws-region: us-east-1
          show-eksctl-command: true

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kubernetes/deployment.yaml
          resource-name: deployment/helloapp
      - run:
          command : |
            kubectl rollout restart deployment

  update:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - kubernetes/install-kubectl
      - kubernetes/update-container-image:
          container-image-updates: 'helloapp=helloapp:${CIRCLE_WORKFLOW_ID}'
          get-rollout-status: true
          record: true
          resource-name: deployment/helloapp
      - run:
          command : |
            kubectl rollout restart deployment

workflows:
  deployment:
    jobs:
      - create-and-push-image
      #- create-infrastructure
      - create-deployment:
          cluster-name: cluster-70284cc9-bafc-45cb-8655-8e1cc19e86c5 #cluster-${CIRCLE_WORKFLOW_ID}
          requires:
             - create-and-push-image
             #- create-infrastructure
      - aws-eks/update-container-image:
          cluster-name: cluster-70284cc9-bafc-45cb-8655-8e1cc19e86c5 #cluster-${CIRCLE_WORKFLOW_ID}
          container-image-updates: 'helloapp=helloapp:${CIRCLE_WORKFLOW_ID}'
          #post-steps:
            #- kubernetes/delete-resource:
                #resource-names: nginx-deployment
                #resource-types: deployment
               # wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/helloapp
          show-kubectl-command: true
      #- update:
         # requires:
            #- create-deployment